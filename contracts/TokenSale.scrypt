import "util.scrypt";
import "rabin.scrypt";

contract TokenSale {
  bytes brfcId;
  bytes contractId;
  Ripemd160 tokenCodeScriptHash;
  Ripemd160 issuerPKH;
  int issuer;

  function buildTokenOutput(bytes lockingScriptBody,
    int amount,
    int authCount,
    Ripemd160 holderPKH,
    int outValue
    ) : bytes {
    //OPRETUNR + '20' + amount(32bytes) + '01' + authCount(1byte) + '14' + holderPKH(20bytes) + '06' + brfc(6bytes) + '02' + stateLen(2bytes)

    // write Token UTXO locking script
    bytes scriptCode = lockingScriptBody + b'20' +  num2bin(amount, Util.TokenValueLen) + b'01' + num2bin(authCount, 1) + b'14' + holderPKH + Util.TOKEN_BRFC_ID + b'023f00';

    return Util.buildOutput(scriptCode, outValue);
  }

  public function buy(
    Ripemd160 buyerPKH,
    int tokenAmount,
    Ripemd160 sellerPKH,
    int satoshiAmount,
    Ripemd160 changePKH,
    int notifySatoshi,
    int outValue,
    bytes prevOutput,
    bytes tokenCodeScript,
    SigHashPreimage txPreimage,
    int rabinSig, bytes rabinPadding) {

    require(tokenAmount > 0);
    require(satoshiAmount > 0);

    SigHashType sigHashType = SigHash.ANYONECANPAY | SigHash.ALL | SigHash.FORKID;
    // this ensures the preimage is for the current tx
    require(Util.checkPreimageSigHashType(txPreimage, sigHashType));
    
    require(hash160(tokenCodeScript) == this.tokenCodeScriptHash);

    //outpoint (32-byte hash + 4-byte little endian)
    bytes prevOutpoint = Util.outpoint(txPreimage);

    //contractId + tokenAmount(4bytes)+satoshiAmount(4bytes)
    bytes msg = prevOutpoint + this.contractId + buyerPKH + num2bin(tokenAmount, Util.TokenValueLen) + sellerPKH + num2bin(satoshiAmount, Util.OutputValueLen);
    // verify rabin signature
    require(Rabin.verifySig(msg, rabinSig, rabinPadding, this.issuer));

    //Sale Output
    bytes output0 = Util.buildOutput(Util.scriptCode(txPreimage), outValue);

    // Token UTXO
    bytes output1 = this.buildTokenOutput(tokenCodeScript, tokenAmount, 0, buyerPKH, outValue);

    // the sale satoshi output
    bytes output2 = Util.buildPublicKeyHashOutput(satoshiAmount, sellerPKH);

    // notify receiver output
    bytes output3 = Util.buildPublicKeyHashOutput(notifySatoshi, buyerPKH);

    Sha256 hashOutputs = hash256(prevOutput + output0 + output1 + output2 + output3);
    require(hashOutputs == Util.hashOutputs(txPreimage));
  }

  public function burn(Sig sig, PubKey pubKey) {
    require(hash160(pubKey) == this.issuerPKH);
    require(checkSig(sig, pubKey));
  }

}